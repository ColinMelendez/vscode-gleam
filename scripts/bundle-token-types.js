
/* This is a build script to generate string variables from the tree-sitter-gleam query files so
*  we can bundle strings with the extension, rather than importing and reading the files at runtime.
*  It also gives a bit more flexibility to edit and pre-process the query content without burdening
*  the extension initialization process, and makes it easier to debug them.
*/
const fs = require('fs');

function getTokenTypes(text) {
  // Remove parts within quotes first to ensure they are not considered
  const cleanedText = text.replace(/"[^"]*"/g, '');

  // Regular expression to match terms following '@' symbol
  const pattern = /@(\w+(\.\w+)*)(?=\s|\(|\))/g;

  const tokens = new Set([]);
  let match;

  // make a  set of all the unique matched terms
  while ((match = pattern.exec(cleanedText)) !== null) {
    if (match[1] && match[1].length > 0) {
      tokens.add(match[1]);
      const subMatches = match[1].split('.');
      if (subMatches.length > 1) {
        subMatches.forEach(subMatch => tokens.add(subMatch));
      }
    }
  }

  // Convert the set to an array and then to a string for the generated file
  return Array.from(tokens);
}

console.log("bundling token types...");

// destination file path (dev) (imports will need to reflect this)
const targetFilePath = 'src/_semanticTokenTypes.ts'

// path to the source file
const highlightsSourcePath ='node_modules/tree-sitter-gleam/queries/highlights.scm';

const highlightsFileContent = fs.readFileSync(highlightsSourcePath, 'utf-8');

const tokenTypes = getTokenTypes(highlightsFileContent);

const tokenTypesVar = `export const gleamSemanticTokenTypes = ${JSON.stringify(tokenTypes)};`;

const headerComment = `// This file is auto-generated by bundle-token-types.js as a build step.\n// Do not edit directly.\n`;

fs.writeFileSync(targetFilePath, `${headerComment}\n${tokenTypesVar}\n`);

console.log("done");
